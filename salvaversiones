extends CharacterBody2D

const moveSpeed = 25
const maxSpeed = 50
const jumpHeight = -300
const gravity = 15

@onready var sprite = $Sprite2D
@onready var animationPlayer = $AnimationPlayer



func _physics_process(_delta):
	velocity.y += gravity
	var friction = false

	if Input.is_action_pressed("ui_right"):
		sprite.flip_h = true
		animationPlayer.play("Walk")
		velocity.x = min(velocity.x + moveSpeed, maxSpeed)

	elif Input.is_action_pressed("ui_left"):
		sprite.flip_h = false
		animationPlayer.play("Walk")
		velocity.x = max(velocity.x - moveSpeed, -maxSpeed)

	else:
		animationPlayer.play("Idle")
		friction = true

	if is_on_floor():
		if Input.is_action_pressed("ui_accept"):
			velocity.y = jumpHeight
		if friction:
			velocity.x = lerp(velocity.x, 0.0, 0.5)
	else:
		if friction:
			velocity.x = lerp(velocity.x, 0.0, 0.01)

	move_and_slide()


#coin


extends Area2D


func _on_body_entered(body):
	if body.get_name() == "Player":
		emit_signal("coinCollected")
	queue_free()
	pass # Replace with function body.


#Player2.0



extends  CharacterBody2D

const moveSpeed = 25
const maxSpeed = 50
const jumpHeight = -300
const gravity = 15

var coinsLabel: Label
var coins = 0

@onready var sprite = $Sprite2D
@onready var animationPlayer = $AnimationPlayer


func _ready():
    coinsLabel = $CanvasLayer/CoinsLabel
    $Coin2D.connect("coin_collected", self, "_on_coin_collected")

func _on_coin_collected():
    coins += 1
    coinsLabel.text = "Coins: " + str(coins)

func _physics_process(delta: float) -> void:
    var velocity: Vector2 = Vector2.ZERO
    velocity.y += gravity * delta
    var friction = false

    if Input.is_action_pressed("ui_right"):
        sprite.flip_h = true
        animationPlayer.play("Walk")
        velocity.x = min(velocity.x + moveSpeed * delta, maxSpeed)

    elif Input.is_action_pressed("ui_left"):
        sprite.flip_h = false
        animationPlayer.play("Walk")
        velocity.x = max(velocity.x - moveSpeed * delta, -maxSpeed)

    else:
        animationPlayer.play("Idle")
        friction = true

    if is_on_floor():
        if Input.is_action_pressed("ui_accept"):
            velocity.y = jumpHeight
        if friction:
            velocity.x = lerp(velocity.x, 0.0, 0.5)
    else:
        if friction:
            velocity.x = lerp(velocity.x, 0.0, 0.01)

    move_and_slide()















